from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.database.orm import AsyncORM

import app.keyboards as kb



router = Router()



class Register(StatesGroup):
    tg_id = State()
    name = State()
    age = State()
    birthday = State()
    zodiac = State()
    group = State()
    hobbies = State()
    contact = State()
    photo_id = State()




@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –¥—Ä—É–∑–µ–πüòá', reply_markup=kb.start_1)


@router.message(F.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞')
async def output_profile(message: Message):
    data = await AsyncORM.send_user_profile(int(message.chat.id))
    if data:
        user_dto = data[0].model_dump()
        await message.answer_photo(photo=user_dto["photo_id"], caption=f'{user_dto["name"]}, '
                                                                       f'{user_dto["age"]} –ª–µ—Ç\n{user_dto["birthday"]}\n{user_dto["hobbies"]}\n'
                                                                       f'{user_dto["group"]}\n{user_dto["contact"]}')
        await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n'
                             '4.–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.', reply_markup=kb.action)
    else:
        await message.answer('–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ü—Ä–µ–¥–ª–∞–≥–∞—é —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ;)',
                             reply_markup=kb.regg)


@router.message(F.text == '–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–ºüòú')
async def output_or_fill(message: Message):
    await message.answer('–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç :)',
                         reply_markup=kb.start_2)


@router.message(Command('myprofile'))
async def my_profile(message: Message):
    await output_profile(message)


@router.message(F.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
async def reg_start(message: Message, state: FSMContext):
    await state.set_state(Register.tg_id)
    await state.update_data(tg_id=int(message.chat.id))
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è', reply_markup=ReplyKeyboardRemove())


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.age)
    await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')


@router.message(Register.age)
async def register_age(message: Message, state: FSMContext):
    if str(message.text).isdigit():
        await state.update_data(age=message.text)
        await state.set_state(Register.birthday)
        await message.answer('–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è')
    else:
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')


@router.message(Register.birthday)
async def register_birthday(message: Message, state: FSMContext):
    await state.update_data(birthday=message.text)
    await state.set_state(Register.zodiac)
    await message.answer('–ö—Ç–æ —Ç—ã –ø–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞?')


@router.message(Register.zodiac)
async def register_zodiac(message: Message, state: FSMContext):
    await state.update_data(zodiac=message.text)
    await state.set_state(Register.group)
    await message.answer('–ò–∑ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø—ã?', reply_markup=kb.group)

@router.message(Register.group)
async def register_group(message: Message, state: FSMContext):
    await state.update_data(group=message.text)
    await state.set_state(Register.hobbies)
    await message.answer('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏',
                         reply_markup=ReplyKeyboardRemove())


@router.message(Register.hobbies)
async def register_hobbies(message: Message, state: FSMContext):
    await state.update_data(hobbies=message.text)
    await state.set_state(Register.contact)
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @user')

@router.message(Register.contact)
async def register_contact(message: Message, state: FSMContext):
    if str(f"@{message.chat.username}") == str(message.text):
        await state.update_data(contact=message.text)
        await state.set_state(Register.photo_id)
        await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ')
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')

@router.message(Register.photo_id, F.photo)
async def register_photo(message: Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer('–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
    await message.answer('–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:')
    data = await state.get_data()

    # curr = await AsyncORM.insert_users(str(data["contact"]))
    # pk = curr[0].model_dump()

    await AsyncORM.insert_profiles(str(data["name"]), int(data["age"]), str(data["birthday"]), str(data["zodiac"]),
                                   str(data["group"]),
                                   str(data["hobbies"]), str(data["contact"]), str(data["photo_id"]), int(data["tg_id"]))
    await message.answer_photo(photo=data["photo_id"], caption=f'{data["name"]}, '
                                                            f'{data["age"]} –ª–µ—Ç\n{data["birthday"]}, {data["zodiac"]}\n'
                                                               f'{data["hobbies"]}\n'
                                                            f'{data["group"]}')
    await state.clear()

    await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n'
                         '4.–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.', reply_markup=kb.action)

@router.message(Register.photo_id, ~F.photo)
async def form_photo(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!')



@router.callback_query(F.data == '–î–∞')
async def yes(callback: CallbackQuery):
    await callback.answer('got you')
    # –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
    get_pk = await AsyncORM.getting_pk(int(callback.from_user.id))
    pk_dto = get_pk[0].model_dump()
    pk = pk_dto["id"]

    get_like_id = await AsyncORM.getting_like_id(int(pk))
    like_id_dto = get_like_id[0].model_dump()
    like_id = like_id_dto["like_id"]

    data = await AsyncORM.convert_likes_to_dto(int(like_id))
    if len(data) > 1:

        user_dto = data[0].model_dump()

        await callback.message.answer_photo(photo=user_dto["photo_id"], caption=f'{user_dto["name"]}, '
                                                                                f'{user_dto["age"]} –ª–µ—Ç\n{user_dto["birthday"]}\n'
                                                                                f'{user_dto["hobbies"]}\n'
                                                                                f'{user_dto["group"]}\n{user_dto["contact"]}')
        await callback.message.answer('–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!', reply_markup=kb.next_user)

        await AsyncORM.remove_one_like(int(pk), int(user_dto["user_id"]))

    else:
        user_dto = data[0].model_dump()

        await callback.message.answer_photo(photo=user_dto["photo_id"], caption=f'{user_dto["name"]}, '
                                                                                f'{user_dto["age"]} –ª–µ—Ç\n{user_dto["birthday"]}\n'
                                                                                f'{user_dto["hobbies"]}\n'
                                                                                f'{user_dto["group"]}\n{user_dto["contact"]}')
        await callback.message.answer('–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!')

        await AsyncORM.remove_one_like(int(pk), int(user_dto["user_id"]))
        await callback.message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n'
                             '4.–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.', reply_markup=kb.action)


@router.callback_query(F.data == '–ù–µ—Ç')
async def no(callback: CallbackQuery):
    await callback.answer('')
    get_pk = await AsyncORM.getting_pk(int(callback.from_user.id))
    pk_dto = get_pk[0].model_dump()
    pk = pk_dto["id"]
    await AsyncORM.remove_all_likes(int(pk))
    await callback.message.answer('aight')
    await callback.message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n'
                                  '4.–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.', reply_markup=kb.action)



@router.message(F.text.contains('1') | F.text.contains('üëé') | F.text.contains('üëç'))
async def see_profiles(message: Message, state: FSMContext, bot: Bot):
    data = await AsyncORM.convert_users_to_dto(int(message.chat.id)) #start sending profiles
    user_dto = data[0].model_dump()
    if message.text == 'üëç':
        await bot.send_message(user_dto["user_id"],
                               '–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –æ–¥–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∞–Ω–∫–µ—Ç—É?',
                               reply_markup=kb.show_user)

        await AsyncORM.insert_likes(int(message.chat.id), int(user_dto["id"]))

    else:
        pass


    await message.answer_photo(photo=user_dto["photo_id"], caption=f'{user_dto["name"]}, '
                                                            f'{user_dto["age"]} –ª–µ—Ç\n{user_dto["birthday"]}\n{user_dto["hobbies"]}\n'
                                                            f'{user_dto["group"]}',
                               reply_markup=kb.profile_view)




@router.message(F.text == '2')
async def restart_reg(message: Message, state: FSMContext):
    await AsyncORM.delete_profile(int(message.chat.id))
    await reg_start(message, state)




class UpdatePhoto(StatesGroup):
    photo_id = State()

@router.message(F.text == '3')
async def edit_photo(message: Message, state: FSMContext):
    await state.set_state(UpdatePhoto.photo_id)
    # await AsyncORM.update_photo(str(f"@{message.chat.username}"), )
    await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ')

@router.message(UpdatePhoto.photo_id, F.photo)
async def upd_photo(message: Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer('–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
    data = await state.get_data()
    await AsyncORM.update_photo(str(f"@{message.chat.username}"), str(data["photo_id"]))

    await state.clear()

    await message.answer('–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:')
    prof = await AsyncORM.send_user_profile(int(message.chat.id))
    user_dto = prof[0].model_dump()
    await message.answer_photo(photo=user_dto["photo_id"], caption=f'{user_dto["name"]}, '
                                                                   f'{user_dto["age"]} –ª–µ—Ç\n{user_dto["birthday"]}\n{user_dto["hobbies"]}\n'
                                                                   f'{user_dto["group"]}')
    await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n'
                         '4.–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.', reply_markup=kb.action)

@router.message(UpdatePhoto.photo_id, ~F.photo)
async def incorrect_photo_id(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!')


class UpdateHobbies(StatesGroup):
    hobbies = State()

@router.message(F.text == '4')
async def edit_hobbies(message: Message, state: FSMContext):
    await state.set_state(UpdateHobbies.hobbies)
    await message.answer('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏')

@router.message(UpdateHobbies.hobbies)
async def upd_hobby(message: Message, state: FSMContext):
    await state.update_data(hobbies=message.text)
    await message.answer('–¢–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã –∏–∑–º–µ–Ω—ë–Ω')
    data = await state.get_data()
    await AsyncORM.update_hobby(str(f"@{message.chat.username}"), str(data["hobbies"]))
    await state.clear()

    await message.answer('–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:')
    prof = await AsyncORM.send_user_profile(int(message.chat.id))
    user_dto = prof[0].model_dump()
    await message.answer_photo(photo=user_dto["photo_id"], caption=f'{user_dto["name"]}, '
                                                                   f'{user_dto["age"]} –ª–µ—Ç\n{user_dto["birthday"]}\n{user_dto["hobbies"]}\n'
                                                                   f'{user_dto["group"]}')
    await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n'
                         '4.–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.', reply_markup=kb.action)
